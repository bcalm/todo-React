{"version":3,"sources":["Component/Task.js","Component/InputBox.js","Component/Hoverable.js","Component/Header.js","Component/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Task","task","taskId","onClick","color","status","textDecoration","style","display","backgroundColor","width","marginLeft","value","InputBox","props","useState","setValue","type","onKeyUp","event","key","onChange","target","withHover","Component","isOver","toggleIsOver","className","onMouseEnter","onMouseLeave","Header","heading","isEditable","toggleEditableStatus","changeStatus","tasks","id","tasksCopy","JSON","parse","stringify","nextStatus","reducer","action","push","splice","Todo","useReducer","state","dispatch","map","index","HoverableTask","HoverableHeader","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d97fd539.chunk.js","sourcesContent":["import React from 'react';\n\nconst Task = ({ task, taskId, onClick }) => {\n  const colors = ['lightblue', 'orange', 'mediumseagreen'];\n  const color = colors[task.status];\n  const textDecoration = task.status === 2 ? 'line-through' : 'none';\n  return (\n    <div style={{ display: 'flex' }} onClick={() => onClick(taskId)}>\n      <p style={{ backgroundColor: color, width: '10px' }}></p>\n      <p style={{ textDecoration, marginLeft: '10px' }}>{task.value}</p>\n    </div>\n  );\n};\n\nexport default Task;\n","import React, { useState } from 'react';\n\nconst InputBox = (props) => {\n  const [value, setValue] = useState(props.value || '');\n\n  const handleKeyUp = (event) => {\n    if (event.key === 'Enter') {\n      props.onChange(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onKeyUp={handleKeyUp}\n      onChange={(event) => setValue(event.target.value)}\n    />\n  );\n};\n\nexport default InputBox;\n","import React, { useState } from 'react';\nimport '../ComponentCss/Todo.css';\n\nconst withHover = (Component, onClick) => {\n  return (props) => {\n    const [isOver, toggleIsOver] = useState(false);\n    return (\n      <div\n        className=\"delete\"\n        onMouseEnter={() => toggleIsOver(true)}\n        onMouseLeave={() => toggleIsOver(false)}\n      >\n        <Component {...props} />\n        {isOver ? <p onClick={() => onClick(props.taskId)}>X</p> : <></>}\n      </div>\n    );\n  };\n};\n\nexport default withHover;\n","import React, { useState } from 'react';\nimport InputBox from './InputBox';\nimport '../ComponentCss/Todo.css';\n\nconst Header = ({ heading, onChange }) => {\n  const [isEditable, toggleEditableStatus] = useState(false);\n\n  const handleChange = (value) => {\n    onChange(value);\n    toggleEditableStatus(false);\n  };\n\n  return (\n    <div className=\"header\">\n      {isEditable ? (\n        <InputBox value={heading} onChange={handleChange} />\n      ) : (\n        <p onClick={() => toggleEditableStatus(true)}>{heading}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useReducer } from 'react';\nimport Task from './Task';\nimport InputBox from './InputBox';\nimport withHover from './Hoverable';\nimport Header from './Header';\nimport '../ComponentCss/Todo.css';\n\nconst changeStatus = (tasks, id) => {\n  const tasksCopy = JSON.parse(JSON.stringify(tasks));\n  const currentStatus = tasks[id].status;\n  const nextStatus = (currentStatus + 1) % 3;\n  tasksCopy[id].status = nextStatus;\n  return tasksCopy;\n};\n\nconst reducer = ({ tasks, heading }, action) => {\n  switch (action.type) {\n    case 'add-task': {\n      tasks.push({ status: 0, value: action.value });\n      return { tasks, heading };\n    }\n\n    case 'update-status':\n      return { tasks: changeStatus(tasks, action.value), heading };\n\n    case 'delete-task': {\n      tasks.splice(action.value, 1);\n      return { tasks, heading };\n    }\n\n    case 'reset-todo':\n      return { tasks: [], heading: 'Todo' };\n\n    case 'update-heading':\n      return { tasks, heading: action.value };\n\n    default:\n      return { tasks, heading };\n  }\n};\n\nconst Todo = () => {\n  const [state, dispatch] = useReducer(reducer, { tasks: [], heading: 'Todo' });\n\n  const tasks = state.tasks.map((task, index) => {\n    const HoverableTask = withHover(Task, (value) =>\n      dispatch({ type: 'delete-task', value })\n    );\n    return (\n      <HoverableTask\n        task={task}\n        taskId={index}\n        key={index}\n        onClick={(value) => dispatch({ type: 'update-status', value })}\n      />\n    );\n  });\n  const HoverableHeader = withHover(Header, () =>\n    dispatch({ type: 'reset-todo' })\n  );\n  return (\n    <div className=\"todo\">\n      <HoverableHeader\n        heading={state.heading}\n        onChange={(value) => dispatch({ type: 'update-heading', value })}\n      />\n      <div> {tasks}</div>\n      <InputBox onChange={(value) => dispatch({ type: 'add-task', value })} />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Component/Todo';\n\nconst App = () => (\n  <div>\n    <Todo />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}