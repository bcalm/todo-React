{"version":3,"sources":["Component/Task.js","Component/InputBox.js","Component/Header.js","Component/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","isOver","handleMouseLeave","bind","handleMouseOver","this","setState","status","task","onClick","taskId","deleteTask","color","getColor","textDecoration","taskDetails","style","display","backgroundColor","width","marginLeft","value","cursor","justifyContent","onMouseOver","onMouseLeave","React","Component","InputBox","handleChange","handleKeyUp","event","key","onChange","target","type","onKeyUp","Header","editable","makeEditable","heading","className","deleteAllTask","Todo","tasks","addNewTask","updateHeading","toggleCheckedStatus","newTask","slice","push","JSON","parse","stringify","getNextState","splice","newHeading","map","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da1c5b1e.chunk.js","sourcesContent":["import React from 'react';\n\nclass Task extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {isOver: false}\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n\n  handleMouseOver(){\n    this.setState({isOver: true});\n  }\n\n  handleMouseLeave(){\n    this.setState({isOver: false});\n  }\n  \n  getColor(status){\n    const colors = ['lightblue', 'orange', 'mediumseagreen'];\n    return colors[status];\n  }\n\n  render(){\n    const {task, onClick, taskId, deleteTask} = this.props;\n    const color = this.getColor(task.status);\n    const textDecoration = task.status === 2 ? 'line-through' : 'none';\n    const taskDetails = (\n          <div style={{display:'flex'}}onClick={() => onClick(taskId)}>\n            <p style={{ backgroundColor: color, width: '10px' }}></p>\n            <p style={{ textDecoration, marginLeft: '10px' }}>{task.value}</p>\n          </div>\n        );\n    return (<div style={{ display: 'flex', cursor: 'pointer',justifyContent: \"space-between\" }}\n    onMouseOver={this.handleMouseOver}\n    onMouseLeave={this.handleMouseLeave}\n    >\n      <div>{taskDetails}</div>\n      {this.state.isOver ? <p onClick={() => deleteTask(taskId)}>X</p> : ''}\n    </div>)\n  }\n}\n\nexport default Task;\n","import React from 'react';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: this.props.value || '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  handleKeyUp(event) {\n    if (event.key === 'Enter') {\n      this.props.onChange(this.state.value);\n      this.setState({ value: '' });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.state.value}\n        onKeyUp={this.handleKeyUp}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default InputBox;\n","import React from 'react';\nimport InputBox from './InputBox';\nimport '../ComponentCss/Todo.css';\n\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isOver: false, editable: false}\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.makeEditable = this.makeEditable.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  makeEditable() {\n    this.setState({ editable: true, isOver: false });\n  }\n\n\n  handleMouseOver(){\n    this.setState({isOver: true});\n  }\n\n  handleMouseLeave(){\n    this.setState({isOver: false});\n  }\n\n  handleChange(value) {\n    this.props.onChange(value);\n    this.setState({ editable: false });\n  }\n\n  render() {\n    const heading = this.state.editable ? (\n      <InputBox value={this.props.heading} onChange={this.handleChange} />\n    ) : (\n      <div className=\"headerContent\">\n          <p onClick={this.makeEditable}>{this.props.heading}</p>\n          {this.state.isOver ? <p onClick={this.props.deleteAllTask}>X</p> : ''}\n      </div>\n    );\n    return <div className=\"header\"\n              onMouseOver={this.handleMouseOver}\n              onMouseLeave={this.handleMouseLeave}>{heading}\n    </div>;\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport Task from './Task';\nimport InputBox from './InputBox';\nimport Header from './Header';\nimport '../ComponentCss/Todo.css';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { tasks: [], heading: 'Todo' };\n    this.addNewTask = this.addNewTask.bind(this);\n    this.updateHeading = this.updateHeading.bind(this);\n    this.toggleCheckedStatus = this.toggleCheckedStatus.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n    this.deleteAllTask = this.deleteAllTask.bind(this);\n  }\n\n  addNewTask(newTask) {\n    this.setState((state) => {\n      const tasks = state.tasks.slice();\n      tasks.push({ status: 0, value: newTask });\n      return { tasks };\n    });\n  }\n\n  getNextState(taskId) {\n    const currentStatus = this.state.tasks[taskId].status;\n    return (currentStatus + 1) % 3;\n  }\n\n  toggleCheckedStatus(taskId) {\n    this.setState((state) => {\n      const tasks = JSON.parse(JSON.stringify(state.tasks));\n      tasks[taskId].status = this.getNextState(taskId);\n      return { tasks };\n    });\n  }\n\n  deleteTask(taskId) {\n    this.setState((state) => {\n      const tasks = JSON.parse(JSON.stringify(state.tasks));\n      tasks.splice(taskId, 1);\n      return { tasks};\n    });\n  }\n\n  deleteAllTask(){\n    this.setState({tasks: []});\n  }\n\n  updateHeading(newHeading) {\n    this.setState({ heading: newHeading });\n  }\n\n  render() {\n    const tasks = this.state.tasks.map((task, index) => {\n      return (\n        <Task\n          task={task}\n          taskId={index}\n          key={index}\n          onClick={this.toggleCheckedStatus}\n          deleteTask={this.deleteTask}\n        />\n      );\n    });\n    return (\n      <div className=\"todo\">\n        <Header heading={this.state.heading} onChange={this.updateHeading} deleteAllTask={this.deleteAllTask}/>\n        <div> {tasks}</div>\n        <InputBox onChange={this.addNewTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Component/Todo';\n\nconst App = () => (\n  <div>\n    <Todo />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}