{"version":3,"sources":["Component/Task.js","Component/InputBox.js","Component/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Task","task","onClick","taskId","color","status","textDecoration","style","display","cursor","backgroundColor","width","marginLeft","value","InputBox","props","handleChange","bind","event","key","this","onChange","target","type","onKeyPress","React","Component","Todo","state","tasks","addNewTask","toggleCheckedStatus","newTask","setState","slice","push","JSON","parse","stringify","getNextState","map","index","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAiBeA,EAfF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAEvBC,EADS,CAAC,YAAa,SAAU,kBAClBH,EAAKI,QACpBC,EAAiC,IAAhBL,EAAKI,OAAe,eAAiB,OAC5D,OACE,yBACEE,MAAO,CAAEC,QAAS,OAAQC,OAAQ,WAClCP,QAAS,kBAAMA,EAAQC,KAEvB,uBAAGI,MAAO,CAAEG,gBAAiBN,EAAOO,MAAO,UAC3C,uBAAGJ,MAAO,CAAED,iBAAgBM,WAAY,SAAWX,EAAKY,SCQ/CC,E,kDAjBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAKNC,GACO,UAAdA,EAAMC,MACRC,KAAKL,MAAMM,SAASH,EAAMI,OAAOT,OACjCK,EAAMI,OAAOT,MAAQ,M,+BAKvB,OAAO,2BAAOU,KAAK,OAAOC,WAAYJ,KAAKJ,mB,GAdxBS,IAAMC,WCqDdC,G,wDAjDb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CAAEC,MAAO,IACtB,EAAKC,WAAa,EAAKA,WAAWb,KAAhB,gBAClB,EAAKc,oBAAsB,EAAKA,oBAAoBd,KAAzB,gBAJV,E,uDAORe,GACTZ,KAAKa,UAAS,SAACL,GACb,IAAMC,EAAQD,EAAMC,MAAMK,QAE1B,OADAL,EAAMM,KAAK,CAAE9B,OAAQ,EAAGQ,MAAOmB,IACxB,CAAEH,c,mCAIA1B,GAEX,OADsBiB,KAAKQ,MAAMC,MAAM1B,GAAQE,OACvB,GAAK,I,0CAGXF,GAAS,IAAD,OAC1BiB,KAAKa,UAAS,SAACL,GACb,IAAMC,EAAQO,KAAKC,MAAMD,KAAKE,UAAUV,EAAMC,QAE9C,OADAA,EAAM1B,GAAQE,OAAS,EAAKkC,aAAapC,GAClC,CAAE0B,c,+BAIH,IAAD,OACDA,EAAQT,KAAKQ,MAAMC,MAAMW,KAAI,SAACvC,EAAMwC,GACxC,OACE,kBAAC,EAAD,CACExC,KAAMA,EACNE,OAAQsC,EACRtB,IAAKsB,EACLvC,QAAS,EAAK6B,yBAIpB,OACE,yBAAKW,UAAU,QACb,oCACA,iCAAOb,GACP,kBAAC,EAAD,CAAUR,SAAUD,KAAKU,kB,GA5CdL,IAAMC,YCIViB,EANH,kBACV,6BACE,kBAAC,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d047bd64.chunk.js","sourcesContent":["import React from 'react';\n\nconst Task = ({ task, onClick, taskId }) => {\n  const colors = ['lightblue', 'orange', 'mediumseagreen'];\n  const color = colors[task.status];\n  const textDecoration = task.status === 2 ? 'line-through' : 'none';\n  return (\n    <div\n      style={{ display: 'flex', cursor: 'pointer' }}\n      onClick={() => onClick(taskId)}\n    >\n      <p style={{ backgroundColor: color, width: '10px' }}></p>\n      <p style={{ textDecoration, marginLeft: '10px' }}>{task.value}</p>\n    </div>\n  );\n};\n\nexport default Task;\n","import React from 'react';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    if (event.key === 'Enter') {\n      this.props.onChange(event.target.value);\n      event.target.value = '';\n    }\n  }\n\n  render() {\n    return <input type=\"text\" onKeyPress={this.handleChange} />;\n  }\n}\n\nexport default InputBox;\n","import React from 'react';\nimport Task from './Task';\nimport InputBox from './InputBox';\nimport '../ComponentCss/Todo.css';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { tasks: [] };\n    this.addNewTask = this.addNewTask.bind(this);\n    this.toggleCheckedStatus = this.toggleCheckedStatus.bind(this);\n  }\n\n  addNewTask(newTask) {\n    this.setState((state) => {\n      const tasks = state.tasks.slice();\n      tasks.push({ status: 0, value: newTask });\n      return { tasks };\n    });\n  }\n\n  getNextState(taskId) {\n    const currentStatus = this.state.tasks[taskId].status;\n    return (currentStatus + 1) % 3;\n  }\n\n  toggleCheckedStatus(taskId) {\n    this.setState((state) => {\n      const tasks = JSON.parse(JSON.stringify(state.tasks));\n      tasks[taskId].status = this.getNextState(taskId);\n      return { tasks };\n    });\n  }\n\n  render() {\n    const tasks = this.state.tasks.map((task, index) => {\n      return (\n        <Task\n          task={task}\n          taskId={index}\n          key={index}\n          onClick={this.toggleCheckedStatus}\n        />\n      );\n    });\n    return (\n      <div className=\"todo\">\n        <h1>Todo</h1>\n        <div> {tasks}</div>\n        <InputBox onChange={this.addNewTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Component/Todo';\n\nconst App = () => (\n  <div>\n    <Todo />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}